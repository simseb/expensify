const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')

const devMode = process.env.NODE_ENV !== 'production'
console.log(`Current ENV: ${process.env.NODE_ENV}`)

module.exports = {
  // entry point
  entry: './src/js/app.js',

  mode: process.env.NODE_ENV,

  // output must be absolute
  output: {
    path: path.join(__dirname, 'public'),
    filename: 'bundle.js'
  },

  // loaders are transformations that are
  // applied on the source code of a module
  module: {
    rules: [{
      test: /\.js$/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader'
      }
    }, {
      test: /\.(sa|sc|c)ss$/,
      use: [
        {
          loader: MiniCssExtractPlugin.loader,
          options: {
            hmr: process.env.NODE_ENV === 'development'
          }
        },
        'css-loader',
        // 'postcss-loader',
        'sass-loader'
      ]
    }]
  },

  plugins: [
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: devMode ? '[name].css' : '[name].[hash].css',
      chunkFilename: devMode ? '[id].css' : '[id].[hash].css'
    }),
    new HtmlWebpackPlugin({
      inject: 'body', // Inject all files that are generated by webpack, e.g. bundle.js
      hash: true,
      template: './src/index.html',
      filename: 'index.html'
    })
  ],

  // source maps
  devtool: 'cheap-module-source-map',

  // dev server config
  devServer: {
    contentBase: path.join(__dirname, 'public'),
    hot: true,
    historyApiFallback: true
  }
}
